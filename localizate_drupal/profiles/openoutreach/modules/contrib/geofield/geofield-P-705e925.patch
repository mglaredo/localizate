From 705e925263332a60c38736cffc1d423caecff77f Mon Sep 17 00:00:00 2001
From: Brandon Morrison <brandon@brandonmorrison.com>
Date: Sat, 8 Dec 2012 17:46:22 -0600
Subject: [PATCH] [#1857940] - cleanup of hook_validate, added documentation, added ability for backend plugins to define custom validation

---
 geofield.module |   66 ++++++++++++++++++++++++++++++++++++++++--------------
 1 files changed, 49 insertions(+), 17 deletions(-)

diff --git a/geofield.module b/geofield.module
index 1b11870..5a120f3 100644
--- a/geofield.module
+++ b/geofield.module
@@ -151,16 +151,11 @@ function geofield_field_settings_form($field, $instance, $has_data) {
 
 /**
  * Implements hook_field_validate().
- * @param string $entity_type
- * @param stdObject $entity
- * @param array $field
- * @param array $instance
- * @param string $langcode
- * @param array $items
- * @param array $errors
- * @return 
  */
 function geofield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
+  ctools_include('plugins');
+  $backend = ctools_get_plugins('geofield', 'geofield_backend', $field['settings']['backend']);
+
   foreach ($items as $delta => $item) {
     $geom_empty = geofield_geom_is_empty($item);
 
@@ -177,13 +172,24 @@ function geofield_field_validate($entity_type, $entity, $field, $instance, $lang
         return FALSE;
       }
       else {
-        $error = geofield_validate_geom($items[0]);
+        $error = geofield_validate_geom($item);
         if ($error) {
           $errors[$field['field_name']][$langcode][$delta][] = array(
             'error' => 'data_faulty', 
             'message' => t('%name: Specified location data is invalid.', array('%name' => $instance['label'])),
           );
         }
+
+        if (!empty($backend['validate'])) {
+          $validate_callback = $backend['validate'];
+          $error = $validate_callback($item);
+          if ($error) {
+            $errors[$field['field_name']][$langcode][$delta][] = array(
+              'error' => 'data_faulty',
+              'message' => t('%name: Specified location data is invalid.', array('%name' => $instance['label'])),
+            );
+          }
+        }
       }
     }
   }
@@ -197,11 +203,20 @@ function geofield_field_validate($entity_type, $entity, $field, $instance, $lang
  *  If validates, return NULL, else error text
  */
 function geofield_validate_geom($item) {
-  try {  
-   $values = geofield_compute_values($item['geom'], $item['input_format']);
-  }  
-  catch (Exception $e) {  
-   return $e;  
+  if (is_string($item)) {
+    try {
+      $values = geofield_compute_values($item);
+    } catch (Exception $e) {
+      return $e;
+    }
+  }
+  else {
+    try {
+     $values = geofield_compute_values($item['geom'], $item['input_format']);
+    }
+    catch (Exception $e) {
+     return $e;
+    }
   }
   return NULL;
 }
@@ -353,9 +368,7 @@ function geofield_ctools_plugin_directory($module, $plugin) {
 /**
  * Geofield Compute Values
  *
- * Compute all dependant values. We compute all other values from whichever
- * column is specified in the master_column value
- *
+ * @todo: documentation
  * Steps:
  * 1. Load the geoPHP library
  * 2. Load the Geometry object from the master-column
@@ -388,6 +401,25 @@ function geofield_compute_values($raw_data, $input_format = NULL) {
   return $values;
 }
 
+/**
+ * Primary function for processing geoPHP geometry objects from raw data.
+ * @param $raw_data
+ *   The info we're trying to process. Valid input can be a string or an array. If $raw_data is a string,
+ *   the value is passed directly to geophp for parsing. If $raw_data is an array (as is expected for Lat/Lon or
+ *   Bounds input), process into raw WKT and generate geometry object from there.
+ * @param $input_format
+ *   Geofield module defined constants that specify a specific type of input. Useful for ensuring that only a specific
+ *   type of data is valid (i.e., if we're expecting WKT, valid GeoJSON doesn't get processed).
+ * @return
+ *   A populated geoPHP geometry object if valid geometry, no return otherwise.
+ *
+ * @TODO: Refactor the function to not check for $input_format from both the optional secondary parameter and 
+ *   an array item in $raw_data. This is probably an artifact from how Geofield's widgets pass data to various field
+ *   hooks. We should only check the optional secondary parameter.
+ * @TODO: Move constants from geofield.widgets.inc to geofield.module
+ * @TODO: Provide useful failure return (FALSE)
+ */
+
 function geofield_geometry_from_values($raw_data, $input_format = NULL) {
   // Load up geoPHP to do the conversions
   $geophp = geophp_load();
-- 
1.7.4.1

